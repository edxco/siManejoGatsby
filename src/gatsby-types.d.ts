/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
  readonly url: Maybe<Scalars['String']>;
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly allStrapiBlog: STRAPI_BLOGConnection;
  readonly allStrapiBlogCategoria: STRAPI_BLOG_CATEGORIAConnection;
  readonly allStrapiBlogContenidoTextnode: STRAPI_BLOG_CONTENIDO_TEXTNODEConnection;
  readonly allStrapiComponentCaracteristicaDetalleCaracteristicaDetalle: STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEConnection;
  readonly allStrapiComponentCaracteristicasCaracteristicas: STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASConnection;
  readonly allStrapiComponentCoordenadasMapaCoordenadasMapa: STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAConnection;
  readonly allStrapiComponentCursosCursos: STRAPI__COMPONENT_CURSOS_CURSOSConnection;
  readonly allStrapiComponentDetalleCursoDetalleCurso: STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOConnection;
  readonly allStrapiComponentDireccionDireccion: STRAPI__COMPONENT_DIRECCION_DIRECCIONConnection;
  readonly allStrapiComponentFooterLinksFooterLinks: STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSConnection;
  readonly allStrapiComponentHighlightHighlight: STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTConnection;
  readonly allStrapiComponentHorarioHorario: STRAPI__COMPONENT_HORARIO_HORARIOConnection;
  readonly allStrapiComponentNumerosContactoNumerosContacto: STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOConnection;
  readonly allStrapiComponentOpcionesPagoOpcionesPago: STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOConnection;
  readonly allStrapiComponentSchoolbannerSchoolbanner: STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERConnection;
  readonly allStrapiCtaBanner: STRAPI_CTA_BANNERConnection;
  readonly allStrapiEscuela: STRAPI_ESCUELAConnection;
  readonly allStrapiEscuelaDescripcionTextnode: STRAPI_ESCUELA_DESCRIPCION_TEXTNODEConnection;
  readonly allStrapiFooter: STRAPI_FOOTERConnection;
  readonly allStrapiInicio: STRAPI_INICIOConnection;
  readonly allStrapiMedia: STRAPI__MEDIAConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
  readonly strapiBlog: Maybe<STRAPI_BLOG>;
  readonly strapiBlogCategoria: Maybe<STRAPI_BLOG_CATEGORIA>;
  readonly strapiBlogContenidoTextnode: Maybe<STRAPI_BLOG_CONTENIDO_TEXTNODE>;
  readonly strapiComponentCaracteristicaDetalleCaracteristicaDetalle: Maybe<STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLE>;
  readonly strapiComponentCaracteristicasCaracteristicas: Maybe<STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICAS>;
  readonly strapiComponentCoordenadasMapaCoordenadasMapa: Maybe<STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPA>;
  readonly strapiComponentCursosCursos: Maybe<STRAPI__COMPONENT_CURSOS_CURSOS>;
  readonly strapiComponentDetalleCursoDetalleCurso: Maybe<STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSO>;
  readonly strapiComponentDireccionDireccion: Maybe<STRAPI__COMPONENT_DIRECCION_DIRECCION>;
  readonly strapiComponentFooterLinksFooterLinks: Maybe<STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKS>;
  readonly strapiComponentHighlightHighlight: Maybe<STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHT>;
  readonly strapiComponentHorarioHorario: Maybe<STRAPI__COMPONENT_HORARIO_HORARIO>;
  readonly strapiComponentNumerosContactoNumerosContacto: Maybe<STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTO>;
  readonly strapiComponentOpcionesPagoOpcionesPago: Maybe<STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGO>;
  readonly strapiComponentSchoolbannerSchoolbanner: Maybe<STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNER>;
  readonly strapiCtaBanner: Maybe<STRAPI_CTA_BANNER>;
  readonly strapiEscuela: Maybe<STRAPI_ESCUELA>;
  readonly strapiEscuelaDescripcionTextnode: Maybe<STRAPI_ESCUELA_DESCRIPCION_TEXTNODE>;
  readonly strapiFooter: Maybe<STRAPI_FOOTER>;
  readonly strapiInicio: Maybe<STRAPI_INICIO>;
  readonly strapiMedia: Maybe<STRAPI__MEDIA>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_allStrapiBlogArgs = {
  filter: InputMaybe<STRAPI_BLOGFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_BLOGSortInput>>>;
};


type Query_allStrapiBlogCategoriaArgs = {
  filter: InputMaybe<STRAPI_BLOG_CATEGORIAFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_BLOG_CATEGORIASortInput>>>;
};


type Query_allStrapiBlogContenidoTextnodeArgs = {
  filter: InputMaybe<STRAPI_BLOG_CONTENIDO_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_BLOG_CONTENIDO_TEXTNODESortInput>>>;
};


type Query_allStrapiComponentCaracteristicaDetalleCaracteristicaDetalleArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLESortInput>>>;
};


type Query_allStrapiComponentCaracteristicasCaracteristicasArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASSortInput>>>;
};


type Query_allStrapiComponentCoordenadasMapaCoordenadasMapaArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPASortInput>>>;
};


type Query_allStrapiComponentCursosCursosArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_CURSOS_CURSOSFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_CURSOS_CURSOSSortInput>>>;
};


type Query_allStrapiComponentDetalleCursoDetalleCursoArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOSortInput>>>;
};


type Query_allStrapiComponentDireccionDireccionArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_DIRECCION_DIRECCIONFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_DIRECCION_DIRECCIONSortInput>>>;
};


type Query_allStrapiComponentFooterLinksFooterLinksArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSSortInput>>>;
};


type Query_allStrapiComponentHighlightHighlightArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTSortInput>>>;
};


type Query_allStrapiComponentHorarioHorarioArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_HORARIO_HORARIOFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_HORARIO_HORARIOSortInput>>>;
};


type Query_allStrapiComponentNumerosContactoNumerosContactoArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOSortInput>>>;
};


type Query_allStrapiComponentOpcionesPagoOpcionesPagoArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOSortInput>>>;
};


type Query_allStrapiComponentSchoolbannerSchoolbannerArgs = {
  filter: InputMaybe<STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERSortInput>>>;
};


type Query_allStrapiCtaBannerArgs = {
  filter: InputMaybe<STRAPI_CTA_BANNERFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_CTA_BANNERSortInput>>>;
};


type Query_allStrapiEscuelaArgs = {
  filter: InputMaybe<STRAPI_ESCUELAFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ESCUELASortInput>>>;
};


type Query_allStrapiEscuelaDescripcionTextnodeArgs = {
  filter: InputMaybe<STRAPI_ESCUELA_DESCRIPCION_TEXTNODEFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_ESCUELA_DESCRIPCION_TEXTNODESortInput>>>;
};


type Query_allStrapiFooterArgs = {
  filter: InputMaybe<STRAPI_FOOTERFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_FOOTERSortInput>>>;
};


type Query_allStrapiInicioArgs = {
  filter: InputMaybe<STRAPI_INICIOFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI_INICIOSortInput>>>;
};


type Query_allStrapiMediaArgs = {
  filter: InputMaybe<STRAPI__MEDIAFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<STRAPI__MEDIASortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiBlogArgs = {
  blog_categoria: InputMaybe<STRAPI_BLOG_CATEGORIAFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  contenido: InputMaybe<STRAPI_BLOGContenidoFilterInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  media: InputMaybe<STRAPI__MEDIAFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  resumen: InputMaybe<StringQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  titulo: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiBlogCategoriaArgs = {
  categoria: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiBlogContenidoTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  contenido: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiComponentCaracteristicaDetalleCaracteristicaDetalleArgs = {
  children: InputMaybe<NodeFilterListInput>;
  descripcion: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  imagen: InputMaybe<STRAPI__MEDIAFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  titulo: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiComponentCaracteristicasCaracteristicasArgs = {
  caracteristicaDetalle: InputMaybe<STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  titulo: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiComponentCoordenadasMapaCoordenadasMapaArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  lat: InputMaybe<StringQueryOperatorInput>;
  lng: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiComponentCursosCursosArgs = {
  children: InputMaybe<NodeFilterListInput>;
  descripcion: InputMaybe<StringQueryOperatorInput>;
  detalleCurso: InputMaybe<STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  titulo: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiComponentDetalleCursoDetalleCursoArgs = {
  children: InputMaybe<NodeFilterListInput>;
  costo: InputMaybe<IntQueryOperatorInput>;
  descripcion: InputMaybe<StringQueryOperatorInput>;
  dias: InputMaybe<StringQueryOperatorInput>;
  hoursPerDay: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mostPopular: InputMaybe<BooleanQueryOperatorInput>;
  nombre: InputMaybe<StringQueryOperatorInput>;
  optionalHours: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  totalHours: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiComponentDireccionDireccionArgs = {
  children: InputMaybe<NodeFilterListInput>;
  ciudad: InputMaybe<StringQueryOperatorInput>;
  estado: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  linea1: InputMaybe<StringQueryOperatorInput>;
  linea2: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiComponentFooterLinksFooterLinksArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  section: InputMaybe<StringQueryOperatorInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiComponentHighlightHighlightArgs = {
  children: InputMaybe<NodeFilterListInput>;
  icono: InputMaybe<STRAPI__MEDIAFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  titulo: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiComponentHorarioHorarioArgs = {
  children: InputMaybe<NodeFilterListInput>;
  diaHora: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiComponentNumerosContactoNumerosContactoArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  telefono: InputMaybe<StringQueryOperatorInput>;
  whatsapp: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiComponentOpcionesPagoOpcionesPagoArgs = {
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  image: InputMaybe<STRAPI__MEDIAFilterInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  payment: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
};


type Query_strapiComponentSchoolbannerSchoolbannerArgs = {
  bgImage: InputMaybe<STRAPI__MEDIAFilterInput>;
  bottomTitle: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  topTitle: InputMaybe<StringQueryOperatorInput>;
};


type Query_strapiCtaBannerArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  media: InputMaybe<STRAPI__MEDIAFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  subTitulo: InputMaybe<StringQueryOperatorInput>;
  titulo: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiEscuelaArgs = {
  bgBoton: InputMaybe<STRAPI__MEDIAFilterInput>;
  caracteristicas: InputMaybe<STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  coordenadas: InputMaybe<STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAFilterInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  cursos: InputMaybe<STRAPI__COMPONENT_CURSOS_CURSOSFilterInput>;
  descripcion: InputMaybe<STRAPI_ESCUELADescripcionFilterInput>;
  direccion: InputMaybe<STRAPI__COMPONENT_DIRECCION_DIRECCIONFilterInput>;
  gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  horarios: InputMaybe<STRAPI__COMPONENT_HORARIO_HORARIOFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  numerosContacto: InputMaybe<STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  schoolbanner: InputMaybe<STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFilterListInput>;
  slug: InputMaybe<StringQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  sucursal: InputMaybe<StringQueryOperatorInput>;
  terminosCondiciones: InputMaybe<StringQueryOperatorInput>;
  titulo: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiEscuelaDescripcionTextnodeArgs = {
  children: InputMaybe<NodeFilterListInput>;
  descripcion: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_strapiFooterArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  description: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  link: InputMaybe<STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFilterListInput>;
  parent: InputMaybe<NodeFilterInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiInicioArgs = {
  beneficios: InputMaybe<STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFilterListInput>;
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  paymentOption: InputMaybe<STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFilterListInput>;
  publishedAt: InputMaybe<DateQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_strapiMediaArgs = {
  children: InputMaybe<NodeFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  formats: InputMaybe<STRAPI__MEDIAFormatsFilterInput>;
  hash: InputMaybe<StringQueryOperatorInput>;
  height: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  localFile: InputMaybe<FileFilterInput>;
  mime: InputMaybe<StringQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  size: InputMaybe<FloatQueryOperatorInput>;
  strapi_id: InputMaybe<IntQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
  width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI_BLOG = Node & {
  readonly blog_categoria: Maybe<STRAPI_BLOG_CATEGORIA>;
  readonly children: ReadonlyArray<Node>;
  readonly contenido: Maybe<STRAPI_BLOGContenido>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly media: Maybe<STRAPI__MEDIA>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly resumen: Maybe<Scalars['String']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly titulo: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_BLOG_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BLOG_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BLOG_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_BLOGConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_BLOGEdge>;
  readonly group: ReadonlyArray<STRAPI_BLOGGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_BLOG>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_BLOGConnection_distinctArgs = {
  field: STRAPI_BLOGFieldSelector;
};


type STRAPI_BLOGConnection_groupArgs = {
  field: STRAPI_BLOGFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_BLOGConnection_maxArgs = {
  field: STRAPI_BLOGFieldSelector;
};


type STRAPI_BLOGConnection_minArgs = {
  field: STRAPI_BLOGFieldSelector;
};


type STRAPI_BLOGConnection_sumArgs = {
  field: STRAPI_BLOGFieldSelector;
};

type STRAPI_BLOGContenido = {
  readonly data: Maybe<STRAPI_BLOG_CONTENIDO_TEXTNODE>;
};

type STRAPI_BLOGContenidoFieldSelector = {
  readonly data: InputMaybe<STRAPI_BLOG_CONTENIDO_TEXTNODEFieldSelector>;
};

type STRAPI_BLOGContenidoFilterInput = {
  readonly data: InputMaybe<STRAPI_BLOG_CONTENIDO_TEXTNODEFilterInput>;
};

type STRAPI_BLOGContenidoSortInput = {
  readonly data: InputMaybe<STRAPI_BLOG_CONTENIDO_TEXTNODESortInput>;
};

type STRAPI_BLOGEdge = {
  readonly next: Maybe<STRAPI_BLOG>;
  readonly node: STRAPI_BLOG;
  readonly previous: Maybe<STRAPI_BLOG>;
};

type STRAPI_BLOGFieldSelector = {
  readonly blog_categoria: InputMaybe<STRAPI_BLOG_CATEGORIAFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contenido: InputMaybe<STRAPI_BLOGContenidoFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly media: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly resumen: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly titulo: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_BLOGFilterInput = {
  readonly blog_categoria: InputMaybe<STRAPI_BLOG_CATEGORIAFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contenido: InputMaybe<STRAPI_BLOGContenidoFilterInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly media: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly resumen: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly titulo: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_BLOGGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_BLOGEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_BLOGGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_BLOG>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_BLOGGroupConnection_distinctArgs = {
  field: STRAPI_BLOGFieldSelector;
};


type STRAPI_BLOGGroupConnection_groupArgs = {
  field: STRAPI_BLOGFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_BLOGGroupConnection_maxArgs = {
  field: STRAPI_BLOGFieldSelector;
};


type STRAPI_BLOGGroupConnection_minArgs = {
  field: STRAPI_BLOGFieldSelector;
};


type STRAPI_BLOGGroupConnection_sumArgs = {
  field: STRAPI_BLOGFieldSelector;
};

type STRAPI_BLOGSortInput = {
  readonly blog_categoria: InputMaybe<STRAPI_BLOG_CATEGORIASortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly contenido: InputMaybe<STRAPI_BLOGContenidoSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly media: InputMaybe<STRAPI__MEDIASortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly resumen: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly titulo: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_BLOG_CATEGORIA = Node & {
  readonly categoria: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_BLOG_CATEGORIA_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BLOG_CATEGORIA_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_BLOG_CATEGORIA_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_BLOG_CATEGORIAConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_BLOG_CATEGORIAEdge>;
  readonly group: ReadonlyArray<STRAPI_BLOG_CATEGORIAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_BLOG_CATEGORIA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_BLOG_CATEGORIAConnection_distinctArgs = {
  field: STRAPI_BLOG_CATEGORIAFieldSelector;
};


type STRAPI_BLOG_CATEGORIAConnection_groupArgs = {
  field: STRAPI_BLOG_CATEGORIAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_BLOG_CATEGORIAConnection_maxArgs = {
  field: STRAPI_BLOG_CATEGORIAFieldSelector;
};


type STRAPI_BLOG_CATEGORIAConnection_minArgs = {
  field: STRAPI_BLOG_CATEGORIAFieldSelector;
};


type STRAPI_BLOG_CATEGORIAConnection_sumArgs = {
  field: STRAPI_BLOG_CATEGORIAFieldSelector;
};

type STRAPI_BLOG_CATEGORIAEdge = {
  readonly next: Maybe<STRAPI_BLOG_CATEGORIA>;
  readonly node: STRAPI_BLOG_CATEGORIA;
  readonly previous: Maybe<STRAPI_BLOG_CATEGORIA>;
};

type STRAPI_BLOG_CATEGORIAFieldSelector = {
  readonly categoria: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_BLOG_CATEGORIAFilterInput = {
  readonly categoria: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_BLOG_CATEGORIAGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_BLOG_CATEGORIAEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_BLOG_CATEGORIAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_BLOG_CATEGORIA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_BLOG_CATEGORIAGroupConnection_distinctArgs = {
  field: STRAPI_BLOG_CATEGORIAFieldSelector;
};


type STRAPI_BLOG_CATEGORIAGroupConnection_groupArgs = {
  field: STRAPI_BLOG_CATEGORIAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_BLOG_CATEGORIAGroupConnection_maxArgs = {
  field: STRAPI_BLOG_CATEGORIAFieldSelector;
};


type STRAPI_BLOG_CATEGORIAGroupConnection_minArgs = {
  field: STRAPI_BLOG_CATEGORIAFieldSelector;
};


type STRAPI_BLOG_CATEGORIAGroupConnection_sumArgs = {
  field: STRAPI_BLOG_CATEGORIAFieldSelector;
};

type STRAPI_BLOG_CATEGORIASortInput = {
  readonly categoria: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_BLOG_CONTENIDO_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly contenido: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_BLOG_CONTENIDO_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_BLOG_CONTENIDO_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_BLOG_CONTENIDO_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_BLOG_CONTENIDO_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_BLOG_CONTENIDO_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_BLOG_CONTENIDO_TEXTNODEFieldSelector;
};


type STRAPI_BLOG_CONTENIDO_TEXTNODEConnection_groupArgs = {
  field: STRAPI_BLOG_CONTENIDO_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_BLOG_CONTENIDO_TEXTNODEConnection_maxArgs = {
  field: STRAPI_BLOG_CONTENIDO_TEXTNODEFieldSelector;
};


type STRAPI_BLOG_CONTENIDO_TEXTNODEConnection_minArgs = {
  field: STRAPI_BLOG_CONTENIDO_TEXTNODEFieldSelector;
};


type STRAPI_BLOG_CONTENIDO_TEXTNODEConnection_sumArgs = {
  field: STRAPI_BLOG_CONTENIDO_TEXTNODEFieldSelector;
};

type STRAPI_BLOG_CONTENIDO_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_BLOG_CONTENIDO_TEXTNODE>;
  readonly node: STRAPI_BLOG_CONTENIDO_TEXTNODE;
  readonly previous: Maybe<STRAPI_BLOG_CONTENIDO_TEXTNODE>;
};

type STRAPI_BLOG_CONTENIDO_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly contenido: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_BLOG_CONTENIDO_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly contenido: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_BLOG_CONTENIDO_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_BLOG_CONTENIDO_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_BLOG_CONTENIDO_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_BLOG_CONTENIDO_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_BLOG_CONTENIDO_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_BLOG_CONTENIDO_TEXTNODEFieldSelector;
};


type STRAPI_BLOG_CONTENIDO_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_BLOG_CONTENIDO_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_BLOG_CONTENIDO_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_BLOG_CONTENIDO_TEXTNODEFieldSelector;
};


type STRAPI_BLOG_CONTENIDO_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_BLOG_CONTENIDO_TEXTNODEFieldSelector;
};


type STRAPI_BLOG_CONTENIDO_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_BLOG_CONTENIDO_TEXTNODEFieldSelector;
};

type STRAPI_BLOG_CONTENIDO_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly contenido: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_CTA_BANNER = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly media: Maybe<STRAPI__MEDIA>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly subTitulo: Maybe<Scalars['String']>;
  readonly titulo: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_CTA_BANNER_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_CTA_BANNER_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_CTA_BANNER_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_CTA_BANNERConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_CTA_BANNEREdge>;
  readonly group: ReadonlyArray<STRAPI_CTA_BANNERGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_CTA_BANNER>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_CTA_BANNERConnection_distinctArgs = {
  field: STRAPI_CTA_BANNERFieldSelector;
};


type STRAPI_CTA_BANNERConnection_groupArgs = {
  field: STRAPI_CTA_BANNERFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_CTA_BANNERConnection_maxArgs = {
  field: STRAPI_CTA_BANNERFieldSelector;
};


type STRAPI_CTA_BANNERConnection_minArgs = {
  field: STRAPI_CTA_BANNERFieldSelector;
};


type STRAPI_CTA_BANNERConnection_sumArgs = {
  field: STRAPI_CTA_BANNERFieldSelector;
};

type STRAPI_CTA_BANNEREdge = {
  readonly next: Maybe<STRAPI_CTA_BANNER>;
  readonly node: STRAPI_CTA_BANNER;
  readonly previous: Maybe<STRAPI_CTA_BANNER>;
};

type STRAPI_CTA_BANNERFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly media: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly subTitulo: InputMaybe<FieldSelectorEnum>;
  readonly titulo: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_CTA_BANNERFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly media: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly subTitulo: InputMaybe<StringQueryOperatorInput>;
  readonly titulo: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_CTA_BANNERGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_CTA_BANNEREdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_CTA_BANNERGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_CTA_BANNER>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_CTA_BANNERGroupConnection_distinctArgs = {
  field: STRAPI_CTA_BANNERFieldSelector;
};


type STRAPI_CTA_BANNERGroupConnection_groupArgs = {
  field: STRAPI_CTA_BANNERFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_CTA_BANNERGroupConnection_maxArgs = {
  field: STRAPI_CTA_BANNERFieldSelector;
};


type STRAPI_CTA_BANNERGroupConnection_minArgs = {
  field: STRAPI_CTA_BANNERFieldSelector;
};


type STRAPI_CTA_BANNERGroupConnection_sumArgs = {
  field: STRAPI_CTA_BANNERFieldSelector;
};

type STRAPI_CTA_BANNERSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly media: InputMaybe<STRAPI__MEDIASortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly subTitulo: InputMaybe<SortOrderEnum>;
  readonly titulo: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_ESCUELA = Node & {
  readonly bgBoton: Maybe<STRAPI__MEDIA>;
  readonly caracteristicas: Maybe<STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICAS>;
  readonly children: ReadonlyArray<Node>;
  readonly coordenadas: Maybe<STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPA>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly cursos: Maybe<STRAPI__COMPONENT_CURSOS_CURSOS>;
  readonly descripcion: Maybe<STRAPI_ESCUELADescripcion>;
  readonly direccion: Maybe<STRAPI__COMPONENT_DIRECCION_DIRECCION>;
  readonly gatsbyPath: Maybe<Scalars['String']>;
  readonly horarios: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_HORARIO_HORARIO>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly numerosContacto: Maybe<STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTO>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly schoolbanner: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNER>>>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly sucursal: Maybe<Scalars['String']>;
  readonly terminosCondiciones: Maybe<Scalars['String']>;
  readonly titulo: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_ESCUELA_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ESCUELA_gatsbyPathArgs = {
  filePath: InputMaybe<Scalars['String']>;
};


type STRAPI_ESCUELA_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_ESCUELA_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_ESCUELAConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ESCUELAEdge>;
  readonly group: ReadonlyArray<STRAPI_ESCUELAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ESCUELA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ESCUELAConnection_distinctArgs = {
  field: STRAPI_ESCUELAFieldSelector;
};


type STRAPI_ESCUELAConnection_groupArgs = {
  field: STRAPI_ESCUELAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ESCUELAConnection_maxArgs = {
  field: STRAPI_ESCUELAFieldSelector;
};


type STRAPI_ESCUELAConnection_minArgs = {
  field: STRAPI_ESCUELAFieldSelector;
};


type STRAPI_ESCUELAConnection_sumArgs = {
  field: STRAPI_ESCUELAFieldSelector;
};

type STRAPI_ESCUELADescripcion = {
  readonly data: Maybe<STRAPI_ESCUELA_DESCRIPCION_TEXTNODE>;
};

type STRAPI_ESCUELADescripcionFieldSelector = {
  readonly data: InputMaybe<STRAPI_ESCUELA_DESCRIPCION_TEXTNODEFieldSelector>;
};

type STRAPI_ESCUELADescripcionFilterInput = {
  readonly data: InputMaybe<STRAPI_ESCUELA_DESCRIPCION_TEXTNODEFilterInput>;
};

type STRAPI_ESCUELADescripcionSortInput = {
  readonly data: InputMaybe<STRAPI_ESCUELA_DESCRIPCION_TEXTNODESortInput>;
};

type STRAPI_ESCUELAEdge = {
  readonly next: Maybe<STRAPI_ESCUELA>;
  readonly node: STRAPI_ESCUELA;
  readonly previous: Maybe<STRAPI_ESCUELA>;
};

type STRAPI_ESCUELAFieldSelector = {
  readonly bgBoton: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly caracteristicas: InputMaybe<STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly coordenadas: InputMaybe<STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly cursos: InputMaybe<STRAPI__COMPONENT_CURSOS_CURSOSFieldSelector>;
  readonly descripcion: InputMaybe<STRAPI_ESCUELADescripcionFieldSelector>;
  readonly direccion: InputMaybe<STRAPI__COMPONENT_DIRECCION_DIRECCIONFieldSelector>;
  readonly gatsbyPath: InputMaybe<FieldSelectorEnum>;
  readonly horarios: InputMaybe<STRAPI__COMPONENT_HORARIO_HORARIOFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly numerosContacto: InputMaybe<STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly schoolbanner: InputMaybe<STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFieldSelector>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly sucursal: InputMaybe<FieldSelectorEnum>;
  readonly terminosCondiciones: InputMaybe<FieldSelectorEnum>;
  readonly titulo: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_ESCUELAFilterInput = {
  readonly bgBoton: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly caracteristicas: InputMaybe<STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly coordenadas: InputMaybe<STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAFilterInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly cursos: InputMaybe<STRAPI__COMPONENT_CURSOS_CURSOSFilterInput>;
  readonly descripcion: InputMaybe<STRAPI_ESCUELADescripcionFilterInput>;
  readonly direccion: InputMaybe<STRAPI__COMPONENT_DIRECCION_DIRECCIONFilterInput>;
  readonly gatsbyPath: InputMaybe<StringQueryOperatorInput>;
  readonly horarios: InputMaybe<STRAPI__COMPONENT_HORARIO_HORARIOFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly numerosContacto: InputMaybe<STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly schoolbanner: InputMaybe<STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFilterListInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly sucursal: InputMaybe<StringQueryOperatorInput>;
  readonly terminosCondiciones: InputMaybe<StringQueryOperatorInput>;
  readonly titulo: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_ESCUELAGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ESCUELAEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ESCUELAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ESCUELA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ESCUELAGroupConnection_distinctArgs = {
  field: STRAPI_ESCUELAFieldSelector;
};


type STRAPI_ESCUELAGroupConnection_groupArgs = {
  field: STRAPI_ESCUELAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ESCUELAGroupConnection_maxArgs = {
  field: STRAPI_ESCUELAFieldSelector;
};


type STRAPI_ESCUELAGroupConnection_minArgs = {
  field: STRAPI_ESCUELAFieldSelector;
};


type STRAPI_ESCUELAGroupConnection_sumArgs = {
  field: STRAPI_ESCUELAFieldSelector;
};

type STRAPI_ESCUELASortInput = {
  readonly bgBoton: InputMaybe<STRAPI__MEDIASortInput>;
  readonly caracteristicas: InputMaybe<STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly coordenadas: InputMaybe<STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPASortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly cursos: InputMaybe<STRAPI__COMPONENT_CURSOS_CURSOSSortInput>;
  readonly descripcion: InputMaybe<STRAPI_ESCUELADescripcionSortInput>;
  readonly direccion: InputMaybe<STRAPI__COMPONENT_DIRECCION_DIRECCIONSortInput>;
  readonly gatsbyPath: InputMaybe<SortOrderEnum>;
  readonly horarios: InputMaybe<STRAPI__COMPONENT_HORARIO_HORARIOSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly numerosContacto: InputMaybe<STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly schoolbanner: InputMaybe<STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERSortInput>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly sucursal: InputMaybe<SortOrderEnum>;
  readonly terminosCondiciones: InputMaybe<SortOrderEnum>;
  readonly titulo: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_ESCUELA_DESCRIPCION_TEXTNODE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly descripcion: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type STRAPI_ESCUELA_DESCRIPCION_TEXTNODEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ESCUELA_DESCRIPCION_TEXTNODEEdge>;
  readonly group: ReadonlyArray<STRAPI_ESCUELA_DESCRIPCION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ESCUELA_DESCRIPCION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ESCUELA_DESCRIPCION_TEXTNODEConnection_distinctArgs = {
  field: STRAPI_ESCUELA_DESCRIPCION_TEXTNODEFieldSelector;
};


type STRAPI_ESCUELA_DESCRIPCION_TEXTNODEConnection_groupArgs = {
  field: STRAPI_ESCUELA_DESCRIPCION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ESCUELA_DESCRIPCION_TEXTNODEConnection_maxArgs = {
  field: STRAPI_ESCUELA_DESCRIPCION_TEXTNODEFieldSelector;
};


type STRAPI_ESCUELA_DESCRIPCION_TEXTNODEConnection_minArgs = {
  field: STRAPI_ESCUELA_DESCRIPCION_TEXTNODEFieldSelector;
};


type STRAPI_ESCUELA_DESCRIPCION_TEXTNODEConnection_sumArgs = {
  field: STRAPI_ESCUELA_DESCRIPCION_TEXTNODEFieldSelector;
};

type STRAPI_ESCUELA_DESCRIPCION_TEXTNODEEdge = {
  readonly next: Maybe<STRAPI_ESCUELA_DESCRIPCION_TEXTNODE>;
  readonly node: STRAPI_ESCUELA_DESCRIPCION_TEXTNODE;
  readonly previous: Maybe<STRAPI_ESCUELA_DESCRIPCION_TEXTNODE>;
};

type STRAPI_ESCUELA_DESCRIPCION_TEXTNODEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly descripcion: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type STRAPI_ESCUELA_DESCRIPCION_TEXTNODEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly descripcion: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type STRAPI_ESCUELA_DESCRIPCION_TEXTNODEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_ESCUELA_DESCRIPCION_TEXTNODEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_ESCUELA_DESCRIPCION_TEXTNODEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_ESCUELA_DESCRIPCION_TEXTNODE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_ESCUELA_DESCRIPCION_TEXTNODEGroupConnection_distinctArgs = {
  field: STRAPI_ESCUELA_DESCRIPCION_TEXTNODEFieldSelector;
};


type STRAPI_ESCUELA_DESCRIPCION_TEXTNODEGroupConnection_groupArgs = {
  field: STRAPI_ESCUELA_DESCRIPCION_TEXTNODEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_ESCUELA_DESCRIPCION_TEXTNODEGroupConnection_maxArgs = {
  field: STRAPI_ESCUELA_DESCRIPCION_TEXTNODEFieldSelector;
};


type STRAPI_ESCUELA_DESCRIPCION_TEXTNODEGroupConnection_minArgs = {
  field: STRAPI_ESCUELA_DESCRIPCION_TEXTNODEFieldSelector;
};


type STRAPI_ESCUELA_DESCRIPCION_TEXTNODEGroupConnection_sumArgs = {
  field: STRAPI_ESCUELA_DESCRIPCION_TEXTNODEFieldSelector;
};

type STRAPI_ESCUELA_DESCRIPCION_TEXTNODESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly descripcion: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type STRAPI_FOOTER = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly description: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly link: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKS>>>;
  readonly parent: Maybe<Node>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_FOOTER_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_FOOTER_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_FOOTER_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_FOOTERConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_FOOTEREdge>;
  readonly group: ReadonlyArray<STRAPI_FOOTERGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_FOOTER>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_FOOTERConnection_distinctArgs = {
  field: STRAPI_FOOTERFieldSelector;
};


type STRAPI_FOOTERConnection_groupArgs = {
  field: STRAPI_FOOTERFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_FOOTERConnection_maxArgs = {
  field: STRAPI_FOOTERFieldSelector;
};


type STRAPI_FOOTERConnection_minArgs = {
  field: STRAPI_FOOTERFieldSelector;
};


type STRAPI_FOOTERConnection_sumArgs = {
  field: STRAPI_FOOTERFieldSelector;
};

type STRAPI_FOOTEREdge = {
  readonly next: Maybe<STRAPI_FOOTER>;
  readonly node: STRAPI_FOOTER;
  readonly previous: Maybe<STRAPI_FOOTER>;
};

type STRAPI_FOOTERFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly link: InputMaybe<STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_FOOTERFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly link: InputMaybe<STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFilterListInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_FOOTERGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_FOOTEREdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_FOOTERGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_FOOTER>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_FOOTERGroupConnection_distinctArgs = {
  field: STRAPI_FOOTERFieldSelector;
};


type STRAPI_FOOTERGroupConnection_groupArgs = {
  field: STRAPI_FOOTERFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_FOOTERGroupConnection_maxArgs = {
  field: STRAPI_FOOTERFieldSelector;
};


type STRAPI_FOOTERGroupConnection_minArgs = {
  field: STRAPI_FOOTERFieldSelector;
};


type STRAPI_FOOTERGroupConnection_sumArgs = {
  field: STRAPI_FOOTERFieldSelector;
};

type STRAPI_FOOTERSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly link: InputMaybe<STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI_INICIO = Node & {
  readonly beneficios: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHT>>>;
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly paymentOption: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGO>>>;
  readonly publishedAt: Maybe<Scalars['Date']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type STRAPI_INICIO_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_INICIO_publishedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI_INICIO_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI_INICIOConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_INICIOEdge>;
  readonly group: ReadonlyArray<STRAPI_INICIOGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_INICIO>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_INICIOConnection_distinctArgs = {
  field: STRAPI_INICIOFieldSelector;
};


type STRAPI_INICIOConnection_groupArgs = {
  field: STRAPI_INICIOFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_INICIOConnection_maxArgs = {
  field: STRAPI_INICIOFieldSelector;
};


type STRAPI_INICIOConnection_minArgs = {
  field: STRAPI_INICIOFieldSelector;
};


type STRAPI_INICIOConnection_sumArgs = {
  field: STRAPI_INICIOFieldSelector;
};

type STRAPI_INICIOEdge = {
  readonly next: Maybe<STRAPI_INICIO>;
  readonly node: STRAPI_INICIO;
  readonly previous: Maybe<STRAPI_INICIO>;
};

type STRAPI_INICIOFieldSelector = {
  readonly beneficios: InputMaybe<STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly paymentOption: InputMaybe<STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFieldSelector>;
  readonly publishedAt: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type STRAPI_INICIOFilterInput = {
  readonly beneficios: InputMaybe<STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly paymentOption: InputMaybe<STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFilterListInput>;
  readonly publishedAt: InputMaybe<DateQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type STRAPI_INICIOGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI_INICIOEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI_INICIOGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI_INICIO>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI_INICIOGroupConnection_distinctArgs = {
  field: STRAPI_INICIOFieldSelector;
};


type STRAPI_INICIOGroupConnection_groupArgs = {
  field: STRAPI_INICIOFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI_INICIOGroupConnection_maxArgs = {
  field: STRAPI_INICIOFieldSelector;
};


type STRAPI_INICIOGroupConnection_minArgs = {
  field: STRAPI_INICIOFieldSelector;
};


type STRAPI_INICIOGroupConnection_sumArgs = {
  field: STRAPI_INICIOFieldSelector;
};

type STRAPI_INICIOSortInput = {
  readonly beneficios: InputMaybe<STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly paymentOption: InputMaybe<STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOSortInput>;
  readonly publishedAt: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICAS = Node & {
  readonly caracteristicaDetalle: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLE>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly titulo: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICAS>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASConnection_distinctArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASFieldSelector;
};


type STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASConnection_groupArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASConnection_maxArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASFieldSelector;
};


type STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASConnection_minArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASFieldSelector;
};


type STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASConnection_sumArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASFieldSelector;
};

type STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICAS>;
  readonly node: STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICAS;
  readonly previous: Maybe<STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICAS>;
};

type STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASFieldSelector = {
  readonly caracteristicaDetalle: InputMaybe<STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly titulo: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASFilterInput = {
  readonly caracteristicaDetalle: InputMaybe<STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFilterListInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly titulo: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICAS>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASFieldSelector;
};


type STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASFieldSelector;
};


type STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASFieldSelector;
};


type STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASFieldSelector;
};

type STRAPI__COMPONENT_CARACTERISTICAS_CARACTERISTICASSortInput = {
  readonly caracteristicaDetalle: InputMaybe<STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLESortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly titulo: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLE = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly descripcion: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly imagen: Maybe<STRAPI__MEDIA>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly titulo: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEConnection_distinctArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFieldSelector;
};


type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEConnection_groupArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEConnection_maxArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFieldSelector;
};


type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEConnection_minArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFieldSelector;
};


type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEConnection_sumArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFieldSelector;
};

type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLE>;
  readonly node: STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLE;
  readonly previous: Maybe<STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLE>;
};

type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly descripcion: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly imagen: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly titulo: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly descripcion: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly imagen: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly titulo: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFilterInput>;
};

type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLE>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFieldSelector;
};


type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFieldSelector;
};


type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFieldSelector;
};


type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLEFieldSelector;
};

type STRAPI__COMPONENT_CARACTERISTICA_DETALLE_CARACTERISTICA_DETALLESortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly descripcion: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly imagen: InputMaybe<STRAPI__MEDIASortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly titulo: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPA = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly lat: Maybe<Scalars['String']>;
  readonly lng: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
};

type STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAConnection_distinctArgs = {
  field: STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAFieldSelector;
};


type STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAConnection_groupArgs = {
  field: STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAConnection_maxArgs = {
  field: STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAFieldSelector;
};


type STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAConnection_minArgs = {
  field: STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAFieldSelector;
};


type STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAConnection_sumArgs = {
  field: STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAFieldSelector;
};

type STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPA>;
  readonly node: STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPA;
  readonly previous: Maybe<STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPA>;
};

type STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly lat: InputMaybe<FieldSelectorEnum>;
  readonly lng: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly lat: InputMaybe<StringQueryOperatorInput>;
  readonly lng: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAFieldSelector;
};


type STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAFieldSelector;
};


type STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAFieldSelector;
};


type STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPAFieldSelector;
};

type STRAPI__COMPONENT_COORDENADAS_MAPA_COORDENADAS_MAPASortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly lat: InputMaybe<SortOrderEnum>;
  readonly lng: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_CURSOS_CURSOS = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly descripcion: Maybe<Scalars['String']>;
  readonly detalleCurso: Maybe<ReadonlyArray<Maybe<STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSO>>>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly titulo: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_CURSOS_CURSOSConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_CURSOS_CURSOSEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_CURSOS_CURSOSGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_CURSOS_CURSOS>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_CURSOS_CURSOSConnection_distinctArgs = {
  field: STRAPI__COMPONENT_CURSOS_CURSOSFieldSelector;
};


type STRAPI__COMPONENT_CURSOS_CURSOSConnection_groupArgs = {
  field: STRAPI__COMPONENT_CURSOS_CURSOSFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_CURSOS_CURSOSConnection_maxArgs = {
  field: STRAPI__COMPONENT_CURSOS_CURSOSFieldSelector;
};


type STRAPI__COMPONENT_CURSOS_CURSOSConnection_minArgs = {
  field: STRAPI__COMPONENT_CURSOS_CURSOSFieldSelector;
};


type STRAPI__COMPONENT_CURSOS_CURSOSConnection_sumArgs = {
  field: STRAPI__COMPONENT_CURSOS_CURSOSFieldSelector;
};

type STRAPI__COMPONENT_CURSOS_CURSOSEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_CURSOS_CURSOS>;
  readonly node: STRAPI__COMPONENT_CURSOS_CURSOS;
  readonly previous: Maybe<STRAPI__COMPONENT_CURSOS_CURSOS>;
};

type STRAPI__COMPONENT_CURSOS_CURSOSFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly descripcion: InputMaybe<FieldSelectorEnum>;
  readonly detalleCurso: InputMaybe<STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly titulo: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_CURSOS_CURSOSFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly descripcion: InputMaybe<StringQueryOperatorInput>;
  readonly detalleCurso: InputMaybe<STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly titulo: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_CURSOS_CURSOSGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_CURSOS_CURSOSEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_CURSOS_CURSOSGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_CURSOS_CURSOS>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_CURSOS_CURSOSGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_CURSOS_CURSOSFieldSelector;
};


type STRAPI__COMPONENT_CURSOS_CURSOSGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_CURSOS_CURSOSFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_CURSOS_CURSOSGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_CURSOS_CURSOSFieldSelector;
};


type STRAPI__COMPONENT_CURSOS_CURSOSGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_CURSOS_CURSOSFieldSelector;
};


type STRAPI__COMPONENT_CURSOS_CURSOSGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_CURSOS_CURSOSFieldSelector;
};

type STRAPI__COMPONENT_CURSOS_CURSOSSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly descripcion: InputMaybe<SortOrderEnum>;
  readonly detalleCurso: InputMaybe<STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly titulo: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSO = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly costo: Maybe<Scalars['Int']>;
  readonly descripcion: Maybe<Scalars['String']>;
  readonly dias: Maybe<Scalars['String']>;
  readonly hoursPerDay: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly mostPopular: Maybe<Scalars['Boolean']>;
  readonly nombre: Maybe<Scalars['String']>;
  readonly optionalHours: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly totalHours: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSO>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOConnection_distinctArgs = {
  field: STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFieldSelector;
};


type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOConnection_groupArgs = {
  field: STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOConnection_maxArgs = {
  field: STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFieldSelector;
};


type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOConnection_minArgs = {
  field: STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFieldSelector;
};


type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOConnection_sumArgs = {
  field: STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFieldSelector;
};

type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSO>;
  readonly node: STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSO;
  readonly previous: Maybe<STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSO>;
};

type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly costo: InputMaybe<FieldSelectorEnum>;
  readonly descripcion: InputMaybe<FieldSelectorEnum>;
  readonly dias: InputMaybe<FieldSelectorEnum>;
  readonly hoursPerDay: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mostPopular: InputMaybe<FieldSelectorEnum>;
  readonly nombre: InputMaybe<FieldSelectorEnum>;
  readonly optionalHours: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly totalHours: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly costo: InputMaybe<IntQueryOperatorInput>;
  readonly descripcion: InputMaybe<StringQueryOperatorInput>;
  readonly dias: InputMaybe<StringQueryOperatorInput>;
  readonly hoursPerDay: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mostPopular: InputMaybe<BooleanQueryOperatorInput>;
  readonly nombre: InputMaybe<StringQueryOperatorInput>;
  readonly optionalHours: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly totalHours: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFilterInput>;
};

type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSO>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFieldSelector;
};


type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFieldSelector;
};


type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFieldSelector;
};


type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOFieldSelector;
};

type STRAPI__COMPONENT_DETALLE_CURSO_DETALLE_CURSOSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly costo: InputMaybe<SortOrderEnum>;
  readonly descripcion: InputMaybe<SortOrderEnum>;
  readonly dias: InputMaybe<SortOrderEnum>;
  readonly hoursPerDay: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mostPopular: InputMaybe<SortOrderEnum>;
  readonly nombre: InputMaybe<SortOrderEnum>;
  readonly optionalHours: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly totalHours: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_DIRECCION_DIRECCION = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly ciudad: Maybe<Scalars['String']>;
  readonly estado: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly linea1: Maybe<Scalars['String']>;
  readonly linea2: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
};

type STRAPI__COMPONENT_DIRECCION_DIRECCIONConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_DIRECCION_DIRECCIONEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_DIRECCION_DIRECCIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_DIRECCION_DIRECCION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_DIRECCION_DIRECCIONConnection_distinctArgs = {
  field: STRAPI__COMPONENT_DIRECCION_DIRECCIONFieldSelector;
};


type STRAPI__COMPONENT_DIRECCION_DIRECCIONConnection_groupArgs = {
  field: STRAPI__COMPONENT_DIRECCION_DIRECCIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_DIRECCION_DIRECCIONConnection_maxArgs = {
  field: STRAPI__COMPONENT_DIRECCION_DIRECCIONFieldSelector;
};


type STRAPI__COMPONENT_DIRECCION_DIRECCIONConnection_minArgs = {
  field: STRAPI__COMPONENT_DIRECCION_DIRECCIONFieldSelector;
};


type STRAPI__COMPONENT_DIRECCION_DIRECCIONConnection_sumArgs = {
  field: STRAPI__COMPONENT_DIRECCION_DIRECCIONFieldSelector;
};

type STRAPI__COMPONENT_DIRECCION_DIRECCIONEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_DIRECCION_DIRECCION>;
  readonly node: STRAPI__COMPONENT_DIRECCION_DIRECCION;
  readonly previous: Maybe<STRAPI__COMPONENT_DIRECCION_DIRECCION>;
};

type STRAPI__COMPONENT_DIRECCION_DIRECCIONFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ciudad: InputMaybe<FieldSelectorEnum>;
  readonly estado: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly linea1: InputMaybe<FieldSelectorEnum>;
  readonly linea2: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_DIRECCION_DIRECCIONFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ciudad: InputMaybe<StringQueryOperatorInput>;
  readonly estado: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly linea1: InputMaybe<StringQueryOperatorInput>;
  readonly linea2: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__COMPONENT_DIRECCION_DIRECCIONGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_DIRECCION_DIRECCIONEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_DIRECCION_DIRECCIONGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_DIRECCION_DIRECCION>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_DIRECCION_DIRECCIONGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_DIRECCION_DIRECCIONFieldSelector;
};


type STRAPI__COMPONENT_DIRECCION_DIRECCIONGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_DIRECCION_DIRECCIONFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_DIRECCION_DIRECCIONGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_DIRECCION_DIRECCIONFieldSelector;
};


type STRAPI__COMPONENT_DIRECCION_DIRECCIONGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_DIRECCION_DIRECCIONFieldSelector;
};


type STRAPI__COMPONENT_DIRECCION_DIRECCIONGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_DIRECCION_DIRECCIONFieldSelector;
};

type STRAPI__COMPONENT_DIRECCION_DIRECCIONSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly ciudad: InputMaybe<SortOrderEnum>;
  readonly estado: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly linea1: InputMaybe<SortOrderEnum>;
  readonly linea2: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKS = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly section: Maybe<Scalars['String']>;
  readonly slug: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
};

type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKS>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSConnection_distinctArgs = {
  field: STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFieldSelector;
};


type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSConnection_groupArgs = {
  field: STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSConnection_maxArgs = {
  field: STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFieldSelector;
};


type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSConnection_minArgs = {
  field: STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFieldSelector;
};


type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSConnection_sumArgs = {
  field: STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFieldSelector;
};

type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKS>;
  readonly node: STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKS;
  readonly previous: Maybe<STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKS>;
};

type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly section: InputMaybe<FieldSelectorEnum>;
  readonly slug: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly section: InputMaybe<StringQueryOperatorInput>;
  readonly slug: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFilterInput>;
};

type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKS>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFieldSelector;
};


type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFieldSelector;
};


type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFieldSelector;
};


type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSFieldSelector;
};

type STRAPI__COMPONENT_FOOTER_LINKS_FOOTER_LINKSSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly section: InputMaybe<SortOrderEnum>;
  readonly slug: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHT = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly icono: Maybe<STRAPI__MEDIA>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly titulo: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTConnection_distinctArgs = {
  field: STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFieldSelector;
};


type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTConnection_groupArgs = {
  field: STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTConnection_maxArgs = {
  field: STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFieldSelector;
};


type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTConnection_minArgs = {
  field: STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFieldSelector;
};


type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTConnection_sumArgs = {
  field: STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFieldSelector;
};

type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHT>;
  readonly node: STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHT;
  readonly previous: Maybe<STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHT>;
};

type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly icono: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly titulo: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly icono: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly titulo: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFilterInput>;
};

type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHT>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFieldSelector;
};


type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFieldSelector;
};


type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFieldSelector;
};


type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTFieldSelector;
};

type STRAPI__COMPONENT_HIGHLIGHT_HIGHLIGHTSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly icono: InputMaybe<STRAPI__MEDIASortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly titulo: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_HORARIO_HORARIO = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly diaHora: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
};

type STRAPI__COMPONENT_HORARIO_HORARIOConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_HORARIO_HORARIOEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_HORARIO_HORARIOGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_HORARIO_HORARIO>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_HORARIO_HORARIOConnection_distinctArgs = {
  field: STRAPI__COMPONENT_HORARIO_HORARIOFieldSelector;
};


type STRAPI__COMPONENT_HORARIO_HORARIOConnection_groupArgs = {
  field: STRAPI__COMPONENT_HORARIO_HORARIOFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_HORARIO_HORARIOConnection_maxArgs = {
  field: STRAPI__COMPONENT_HORARIO_HORARIOFieldSelector;
};


type STRAPI__COMPONENT_HORARIO_HORARIOConnection_minArgs = {
  field: STRAPI__COMPONENT_HORARIO_HORARIOFieldSelector;
};


type STRAPI__COMPONENT_HORARIO_HORARIOConnection_sumArgs = {
  field: STRAPI__COMPONENT_HORARIO_HORARIOFieldSelector;
};

type STRAPI__COMPONENT_HORARIO_HORARIOEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_HORARIO_HORARIO>;
  readonly node: STRAPI__COMPONENT_HORARIO_HORARIO;
  readonly previous: Maybe<STRAPI__COMPONENT_HORARIO_HORARIO>;
};

type STRAPI__COMPONENT_HORARIO_HORARIOFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly diaHora: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_HORARIO_HORARIOFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly diaHora: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__COMPONENT_HORARIO_HORARIOFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__COMPONENT_HORARIO_HORARIOFilterInput>;
};

type STRAPI__COMPONENT_HORARIO_HORARIOGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_HORARIO_HORARIOEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_HORARIO_HORARIOGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_HORARIO_HORARIO>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_HORARIO_HORARIOGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_HORARIO_HORARIOFieldSelector;
};


type STRAPI__COMPONENT_HORARIO_HORARIOGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_HORARIO_HORARIOFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_HORARIO_HORARIOGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_HORARIO_HORARIOFieldSelector;
};


type STRAPI__COMPONENT_HORARIO_HORARIOGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_HORARIO_HORARIOFieldSelector;
};


type STRAPI__COMPONENT_HORARIO_HORARIOGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_HORARIO_HORARIOFieldSelector;
};

type STRAPI__COMPONENT_HORARIO_HORARIOSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly diaHora: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTO = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly telefono: Maybe<Scalars['String']>;
  readonly whatsapp: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTO>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOConnection_distinctArgs = {
  field: STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOFieldSelector;
};


type STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOConnection_groupArgs = {
  field: STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOConnection_maxArgs = {
  field: STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOFieldSelector;
};


type STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOConnection_minArgs = {
  field: STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOFieldSelector;
};


type STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOConnection_sumArgs = {
  field: STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOFieldSelector;
};

type STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTO>;
  readonly node: STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTO;
  readonly previous: Maybe<STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTO>;
};

type STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly telefono: InputMaybe<FieldSelectorEnum>;
  readonly whatsapp: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly telefono: InputMaybe<StringQueryOperatorInput>;
  readonly whatsapp: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTO>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOFieldSelector;
};


type STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOFieldSelector;
};


type STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOFieldSelector;
};


type STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOFieldSelector;
};

type STRAPI__COMPONENT_NUMEROS_CONTACTO_NUMEROS_CONTACTOSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly telefono: InputMaybe<SortOrderEnum>;
  readonly whatsapp: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGO = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly image: Maybe<STRAPI__MEDIA>;
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly payment: Maybe<Scalars['String']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
};

type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOEdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGO>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOConnection_distinctArgs = {
  field: STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFieldSelector;
};


type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOConnection_groupArgs = {
  field: STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOConnection_maxArgs = {
  field: STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFieldSelector;
};


type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOConnection_minArgs = {
  field: STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFieldSelector;
};


type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOConnection_sumArgs = {
  field: STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFieldSelector;
};

type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOEdge = {
  readonly next: Maybe<STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGO>;
  readonly node: STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGO;
  readonly previous: Maybe<STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGO>;
};

type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly payment: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly payment: InputMaybe<StringQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFilterInput>;
};

type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGO>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFieldSelector;
};


type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFieldSelector;
};


type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFieldSelector;
};


type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOFieldSelector;
};

type STRAPI__COMPONENT_OPCIONES_PAGO_OPCIONES_PAGOSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<STRAPI__MEDIASortInput>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly payment: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
};

type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNER = Node & {
  readonly bgImage: Maybe<STRAPI__MEDIA>;
  readonly bottomTitle: Maybe<Scalars['String']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly title: Maybe<Scalars['String']>;
  readonly topTitle: Maybe<Scalars['String']>;
};

type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNEREdge>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNER>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERConnection_distinctArgs = {
  field: STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFieldSelector;
};


type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERConnection_groupArgs = {
  field: STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERConnection_maxArgs = {
  field: STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFieldSelector;
};


type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERConnection_minArgs = {
  field: STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFieldSelector;
};


type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERConnection_sumArgs = {
  field: STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFieldSelector;
};

type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNEREdge = {
  readonly next: Maybe<STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNER>;
  readonly node: STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNER;
  readonly previous: Maybe<STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNER>;
};

type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFieldSelector = {
  readonly bgImage: InputMaybe<STRAPI__MEDIAFieldSelector>;
  readonly bottomTitle: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly topTitle: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFilterInput = {
  readonly bgImage: InputMaybe<STRAPI__MEDIAFilterInput>;
  readonly bottomTitle: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly topTitle: InputMaybe<StringQueryOperatorInput>;
};

type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFilterListInput = {
  readonly elemMatch: InputMaybe<STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFilterInput>;
};

type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNEREdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNER>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERGroupConnection_distinctArgs = {
  field: STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFieldSelector;
};


type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERGroupConnection_groupArgs = {
  field: STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERGroupConnection_maxArgs = {
  field: STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFieldSelector;
};


type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERGroupConnection_minArgs = {
  field: STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFieldSelector;
};


type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERGroupConnection_sumArgs = {
  field: STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERFieldSelector;
};

type STRAPI__COMPONENT_SCHOOLBANNER_SCHOOLBANNERSortInput = {
  readonly bgImage: InputMaybe<STRAPI__MEDIASortInput>;
  readonly bottomTitle: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly topTitle: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIA = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly ext: Maybe<Scalars['String']>;
  readonly formats: Maybe<STRAPI__MEDIAFormats>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly localFile: Maybe<File>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly size: Maybe<Scalars['Float']>;
  readonly strapi_id: Maybe<Scalars['Int']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};


type STRAPI__MEDIA_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type STRAPI__MEDIA_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type STRAPI__MEDIAConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__MEDIAEdge>;
  readonly group: ReadonlyArray<STRAPI__MEDIAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__MEDIA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__MEDIAConnection_distinctArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAConnection_groupArgs = {
  field: STRAPI__MEDIAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__MEDIAConnection_maxArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAConnection_minArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAConnection_sumArgs = {
  field: STRAPI__MEDIAFieldSelector;
};

type STRAPI__MEDIAEdge = {
  readonly next: Maybe<STRAPI__MEDIA>;
  readonly node: STRAPI__MEDIA;
  readonly previous: Maybe<STRAPI__MEDIA>;
};

type STRAPI__MEDIAFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly formats: InputMaybe<STRAPI__MEDIAFormatsFieldSelector>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly localFile: InputMaybe<FileFieldSelector>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly strapi_id: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly formats: InputMaybe<STRAPI__MEDIAFormatsFilterInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly localFile: InputMaybe<FileFilterInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly strapi_id: InputMaybe<IntQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormats = {
  readonly large: Maybe<STRAPI__MEDIAFormatsLarge>;
  readonly medium: Maybe<STRAPI__MEDIAFormatsMedium>;
  readonly small: Maybe<STRAPI__MEDIAFormatsSmall>;
  readonly thumbnail: Maybe<STRAPI__MEDIAFormatsThumbnail>;
};

type STRAPI__MEDIAFormatsFieldSelector = {
  readonly large: InputMaybe<STRAPI__MEDIAFormatsLargeFieldSelector>;
  readonly medium: InputMaybe<STRAPI__MEDIAFormatsMediumFieldSelector>;
  readonly small: InputMaybe<STRAPI__MEDIAFormatsSmallFieldSelector>;
  readonly thumbnail: InputMaybe<STRAPI__MEDIAFormatsThumbnailFieldSelector>;
};

type STRAPI__MEDIAFormatsFilterInput = {
  readonly large: InputMaybe<STRAPI__MEDIAFormatsLargeFilterInput>;
  readonly medium: InputMaybe<STRAPI__MEDIAFormatsMediumFilterInput>;
  readonly small: InputMaybe<STRAPI__MEDIAFormatsSmallFilterInput>;
  readonly thumbnail: InputMaybe<STRAPI__MEDIAFormatsThumbnailFilterInput>;
};

type STRAPI__MEDIAFormatsLarge = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsLargeFieldSelector = {
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFormatsLargeFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsLargeSortInput = {
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIAFormatsMedium = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsMediumFieldSelector = {
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFormatsMediumFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsMediumSortInput = {
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIAFormatsSmall = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsSmallFieldSelector = {
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFormatsSmallFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsSmallSortInput = {
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIAFormatsSortInput = {
  readonly large: InputMaybe<STRAPI__MEDIAFormatsLargeSortInput>;
  readonly medium: InputMaybe<STRAPI__MEDIAFormatsMediumSortInput>;
  readonly small: InputMaybe<STRAPI__MEDIAFormatsSmallSortInput>;
  readonly thumbnail: InputMaybe<STRAPI__MEDIAFormatsThumbnailSortInput>;
};

type STRAPI__MEDIAFormatsThumbnail = {
  readonly ext: Maybe<Scalars['String']>;
  readonly hash: Maybe<Scalars['String']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly mime: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
  readonly size: Maybe<Scalars['Float']>;
  readonly url: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type STRAPI__MEDIAFormatsThumbnailFieldSelector = {
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly hash: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly mime: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type STRAPI__MEDIAFormatsThumbnailFilterInput = {
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly hash: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly mime: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<FloatQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type STRAPI__MEDIAFormatsThumbnailSortInput = {
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type STRAPI__MEDIAGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<STRAPI__MEDIAEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<STRAPI__MEDIAGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<STRAPI__MEDIA>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type STRAPI__MEDIAGroupConnection_distinctArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAGroupConnection_groupArgs = {
  field: STRAPI__MEDIAFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type STRAPI__MEDIAGroupConnection_maxArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAGroupConnection_minArgs = {
  field: STRAPI__MEDIAFieldSelector;
};


type STRAPI__MEDIAGroupConnection_sumArgs = {
  field: STRAPI__MEDIAFieldSelector;
};

type STRAPI__MEDIASortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly formats: InputMaybe<STRAPI__MEDIAFormatsSortInput>;
  readonly hash: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly localFile: InputMaybe<FileSortInput>;
  readonly mime: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly strapi_id: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly apiURL: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fromURL: Maybe<Scalars['Boolean']>;
  readonly googleMapsKey: Maybe<Scalars['String']>;
  readonly image: Maybe<Scalars['String']>;
  readonly mpAccessToken: Maybe<Scalars['String']>;
  readonly mpPublicKey: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly twitterUsername: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly apiURL: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fromURL: InputMaybe<FieldSelectorEnum>;
  readonly googleMapsKey: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FieldSelectorEnum>;
  readonly mpAccessToken: InputMaybe<FieldSelectorEnum>;
  readonly mpPublicKey: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly twitterUsername: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly apiURL: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fromURL: InputMaybe<BooleanQueryOperatorInput>;
  readonly googleMapsKey: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<StringQueryOperatorInput>;
  readonly mpAccessToken: InputMaybe<StringQueryOperatorInput>;
  readonly mpPublicKey: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly twitterUsername: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly apiURL: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fromURL: InputMaybe<SortOrderEnum>;
  readonly googleMapsKey: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<SortOrderEnum>;
  readonly mpAccessToken: InputMaybe<SortOrderEnum>;
  readonly mpPublicKey: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly twitterUsername: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };


}
